# -*- coding: utf-8 -*-
"""
Created on Wed Sep 29 12:48:21 2021

@author: Shawn Temes
"""

import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library
#install excell reader
#! pip3 install openpyxl
#read in data into dataframe from website
df_can = pd.read_excel(
    'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/Canada.xlsx',
    sheet_name='Canada by Citizenship',
    skiprows=range(20),
    skipfooter=2)

print('Data read into a pandas dataframe!')
#check data, specified 10 rows
df_can.head(10)
#check bottom 5 default
df_can.tail()
#breif check of data
df_can.info(verbose=False)
#list of column headers
df_can.columns
#list of indices(rows)
df_can.index
#print types. Note: default are not lists
print(type(df_can.columns))
print(type(df_can.index))
#make columns a list
df_can.columns.tolist()
#make rows a list
df_can.index.tolist()
#print type
print(type(df_can.columns.tolist()))
print(type(df_can.index.tolist()))
# size of dataframe (rows, columns)
df_can.shape    
# in pandas axis=0 represents rows (default) and axis=1 represents columns.
#drop columns to clean data
df_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)
df_can.head(2)
#renaming columns inplace=True does it directly
df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True)
df_can.columns
#creates a total sum column
df_can['Total'] = df_can.sum(axis=1)
#checks for null objects
df_can.isnull().sum()
#quick summary of all columns
df_can.describe()
"""
Selecting a column
There are two ways to filter on a column name:

Method 1: Quick and easy, but only works if the column name does NOT have spaces or special characters.

    df.column_name               # returns series
Method 2: More robust, and can filter on multiple columns.

    df['column']                  # returns series
    df[['column 1', 'column 2']]  # returns dataframe
"""
df_can.Country  # returns a series
#1980-1985 
df_can[['Country', 1980, 1981, 1982, 1983, 1984, 1985]] # returns a dataframe
# notice that 'Country' is string, and the years are integers. 
# for the sake of consistency, we will convert all column names to string later on.
"""
2 ways to select rows
df.loc[label]    # filters by the labels of the index/column
df.iloc[index]   # filters by the positions of the index/column
"""
#sets the country column as the index
df_can.set_index('Country', inplace=True)
# tip: The opposite of set is reset. So to reset the index, we can use df_can.reset_index()

## optional: to remove the name of the index
df_can.index.name = None

# 1. the full row data (all columns) for japan
df_can.loc['Japan']

# alternate methods
df_can.iloc[87]
df_can[df_can.index == 'Japan']

# 2. for year 2013
df_can.loc['Japan', 2013]

# alternate method
# year 2013 is the last column, with a positional index of 36
df_can.iloc[87, 36]

# 3. for years 1980 to 1985
df_can.loc['Japan', [1980, 1981, 1982, 1983, 1984, 1984]]
# Alternative Method
df_can.iloc[87, [3, 4, 5, 6, 7, 8]]
#To avoid this ambuigity, let's convert the column names into strings: '1980' to '2013'
df_can.columns = list(map(str, df_can.columns))
# [print (type(x)) for x in df_can.columns.values] #<-- uncomment to check type of column headers
# useful for plotting later on
years = list(map(str, range(1980, 2014)))
years

# 1. create the condition boolean series from Asia
condition = df_can['Continent'] == 'Asia'
print(condition)

 #2. pass this condition into the dataFrame gets totals for all countries in Asia
df_can[condition]

# we can pass multiple criteria in the same line.
# let's filter for AreaNAme = Asia and RegName = Southern Asia
df_can[(df_can['Continent']=='Asia') & (df_can['Region']=='Southern Asia')]
# note: When using 'and' and 'or' operators, pandas requires we use '&' and '|' instead of 'and' and 'or'
# don't forget to enclose the two conditions in parentheses

#review changes
print('data dimensions:', df_can.shape)
print(df_can.columns)
df_can.head(2)

"""
Plotting in matplotlib
Matplotlib can be used in Python scripts, the Python and IPython shell, 
the jupyter notebook, web application servers
One of the core aspects of Matplotlib is matplotlib.pyplot
"""
# we are using the inline backend
%matplotlib inline 

import matplotlib as mpl
import matplotlib.pyplot as plt
#check if it loaded correctly
print('Matplotlib version: ', mpl.__version__)  # >= 2.0.0
#optional apply a style
print(plt.style.available)
mpl.style.use(['ggplot']) # optional: for ggplot-like style

"""
Plotting in Pandas
pandas has a built-in implementation of Matplotlib that we can use. 
Plotting in pandas is as simple as appending a .plot() method to a series or 
dataframe.
"""
#Line plots :Use line plot when you have a continuous data set. These are best suited for trend-based visualizations of data over a period of time.
#create variable haiti
haiti = df_can.loc['Haiti', years] # passing in years 1980 - 2013 to exclude the 'total' column
haiti.head()
#creates a simple line plot
haiti.plot()
#adds labels
haiti.index = haiti.index.map(int) # let's change the index values of Haiti to type integer for plotting
haiti.plot(kind='line')

plt.title('Immigration from Haiti')
plt.ylabel('Number of immigrants')
plt.xlabel('Years')

plt.show() # need this line to show the updates made to the figure


#annotation of 2010 crisis to haiti.plot()
haiti.plot(kind='line')
plt.title('Immigration from Haiti')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')

# annotate the 2010 Earthquake. 
# syntax: plt.text(x, y, label)
plt.text(2000, 6000, '2010 Earthquake') # see note below

plt.show() 

#more annotation
 #Since the x-axis (years) is type 'integer', we specified x as a year. The y axis (number of immigrants) is type 'integer', so we can just specify the value y = 6000.
plt.text(2000, 6000, '2010 Earthquake') # years stored as type int
#If the years were stored as type 'string', we would need to specify x as the index position of the year. Eg 20th index is year 2000 since it is the 20th year with a base year of 1980.
plt.text(20, 6000, '2010 Earthquake') # years stored as type int
    
#Question 1Get Data for India and China
    df_CI = df_can.loc[['India', 'China'], years]
    df_CI

#Create Line Graph
    df_CI.plot(kind='line')
#transpose method swaps the rows and columns
df_CI = df_CI.transpose()
df_CI.head()
#labels for new line graph
    df_CI.index = df_CI.index.map(int) # let's change the index values of df_CI to type integer for plotting
    df_CI.plot(kind='line')

    plt.title('Immigrants from China and India')
    plt.ylabel('Number of Immigrants')
    plt.xlabel('Years')

    plt.show()

#compare the trend of top 5 countries into canada
    #Step 1: Get the dataset. Recall that we created a Total column that calculates cumulative immigration by country. 
    #We will sort on this column to get our top 5 countries using pandas sort_values() method.
    
    inplace = True # paramemter saves the changes to the original df_can dataframe
    df_can.sort_values(by='Total', ascending=False, axis=0, inplace=True)

    # get the top 5 entries
    df_top5 = df_can.head(5)

    # transpose the dataframe
    df_top5 = df_top5[years].transpose() 

    print(df_top5)


    #Step 2: Plot the dataframe. To make the plot more readeable, we will change the size using the `figsize` parameter.
    df_top5.index = df_top5.index.map(int) # let's change the index values of df_top5 to type integer for plotting
    df_top5.plot(kind='line', figsize=(14, 8)) # pass a tuple (x, y) size



    plt.title('Immigration Trend of Top 5 Countries')
    plt.ylabel('Number of Immigrants')
    plt.xlabel('Years')


    plt.show()
"""
Other Plots:
bar for vertical bar plots
barh for horizontal bar plots
hist for histogram
box for boxplot
kde or density for density plots
area for area plots
pie for pie plots
scatter for scatter plots
hexbin for hexbin plot
"""    
